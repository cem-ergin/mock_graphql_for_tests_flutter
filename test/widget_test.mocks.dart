// Mocks generated by Mockito 5.4.2 from annotations
// in mock_graphql_for_tests/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:graphql/client.dart' as _i4;
import 'package:graphql/src/cache/cache.dart' as _i3;
import 'package:graphql/src/core/_base_options.dart' as _i7;
import 'package:graphql/src/core/core.dart' as _i2;
import 'package:graphql/src/scheduler/scheduler.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDefaultPolicies_0 extends _i1.SmartFake
    implements _i2.DefaultPolicies {
  _FakeDefaultPolicies_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLink_1 extends _i1.SmartFake implements _i2.Link {
  _FakeLink_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGraphQLCache_2 extends _i1.SmartFake implements _i3.GraphQLCache {
  _FakeGraphQLCache_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryManager_3 extends _i1.SmartFake implements _i2.QueryManager {
  _FakeQueryManager_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGraphQLClient_4 extends _i1.SmartFake implements _i4.GraphQLClient {
  _FakeGraphQLClient_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableQuery_5<TParsed1> extends _i1.SmartFake
    implements _i2.ObservableQuery<TParsed1> {
  _FakeObservableQuery_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryResult_6<TParsed1 extends Object?> extends _i1.SmartFake
    implements _i2.QueryResult<TParsed1> {
  _FakeQueryResult_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMultiSourceResult_7<TParsed1> extends _i1.SmartFake
    implements _i2.MultiSourceResult<TParsed1> {
  _FakeMultiSourceResult_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePolicies_8 extends _i1.SmartFake implements _i2.Policies {
  _FakePolicies_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWatchQueryOptions_9<TParsed1 extends Object?> extends _i1.SmartFake
    implements _i2.WatchQueryOptions<TParsed1> {
  _FakeWatchQueryOptions_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_10<T> extends _i1.SmartFake
    implements _i5.StreamController<T> {
  _FakeStreamController_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GraphQLClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockGraphQLClient extends _i1.Mock implements _i4.GraphQLClient {
  @override
  _i2.DefaultPolicies get defaultPolicies => (super.noSuchMethod(
        Invocation.getter(#defaultPolicies),
        returnValue: _FakeDefaultPolicies_0(
          this,
          Invocation.getter(#defaultPolicies),
        ),
        returnValueForMissingStub: _FakeDefaultPolicies_0(
          this,
          Invocation.getter(#defaultPolicies),
        ),
      ) as _i2.DefaultPolicies);
  @override
  set defaultPolicies(_i2.DefaultPolicies? _defaultPolicies) =>
      super.noSuchMethod(
        Invocation.setter(
          #defaultPolicies,
          _defaultPolicies,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Link get link => (super.noSuchMethod(
        Invocation.getter(#link),
        returnValue: _FakeLink_1(
          this,
          Invocation.getter(#link),
        ),
        returnValueForMissingStub: _FakeLink_1(
          this,
          Invocation.getter(#link),
        ),
      ) as _i2.Link);
  @override
  _i3.GraphQLCache get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: _FakeGraphQLCache_2(
          this,
          Invocation.getter(#cache),
        ),
        returnValueForMissingStub: _FakeGraphQLCache_2(
          this,
          Invocation.getter(#cache),
        ),
      ) as _i3.GraphQLCache);
  @override
  _i2.QueryManager get queryManager => (super.noSuchMethod(
        Invocation.getter(#queryManager),
        returnValue: _FakeQueryManager_3(
          this,
          Invocation.getter(#queryManager),
        ),
        returnValueForMissingStub: _FakeQueryManager_3(
          this,
          Invocation.getter(#queryManager),
        ),
      ) as _i2.QueryManager);
  @override
  set queryManager(_i2.QueryManager? _queryManager) => super.noSuchMethod(
        Invocation.setter(
          #queryManager,
          _queryManager,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.GraphQLClient copyWith({
    _i2.Link? link,
    _i3.GraphQLCache? cache,
    _i2.DefaultPolicies? defaultPolicies,
    bool? alwaysRebroadcast,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #link: link,
            #cache: cache,
            #defaultPolicies: defaultPolicies,
            #alwaysRebroadcast: alwaysRebroadcast,
          },
        ),
        returnValue: _FakeGraphQLClient_4(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #link: link,
              #cache: cache,
              #defaultPolicies: defaultPolicies,
              #alwaysRebroadcast: alwaysRebroadcast,
            },
          ),
        ),
        returnValueForMissingStub: _FakeGraphQLClient_4(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #link: link,
              #cache: cache,
              #defaultPolicies: defaultPolicies,
              #alwaysRebroadcast: alwaysRebroadcast,
            },
          ),
        ),
      ) as _i4.GraphQLClient);
  @override
  _i2.ObservableQuery<TParsed> watchQuery<TParsed>(
          _i2.WatchQueryOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchQuery,
          [options],
        ),
        returnValue: _FakeObservableQuery_5<TParsed>(
          this,
          Invocation.method(
            #watchQuery,
            [options],
          ),
        ),
        returnValueForMissingStub: _FakeObservableQuery_5<TParsed>(
          this,
          Invocation.method(
            #watchQuery,
            [options],
          ),
        ),
      ) as _i2.ObservableQuery<TParsed>);
  @override
  _i2.ObservableQuery<TParsed> watchMutation<TParsed>(
          _i2.WatchQueryOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchMutation,
          [options],
        ),
        returnValue: _FakeObservableQuery_5<TParsed>(
          this,
          Invocation.method(
            #watchMutation,
            [options],
          ),
        ),
        returnValueForMissingStub: _FakeObservableQuery_5<TParsed>(
          this,
          Invocation.method(
            #watchMutation,
            [options],
          ),
        ),
      ) as _i2.ObservableQuery<TParsed>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> query<TParsed>(
          _i2.QueryOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [options],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #query,
            [options],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #query,
            [options],
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> mutate<TParsed>(
          _i2.MutationOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #mutate,
          [options],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #mutate,
            [options],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #mutate,
            [options],
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  _i5.Stream<_i2.QueryResult<TParsed>> subscribe<TParsed>(
          _i2.SubscriptionOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [options],
        ),
        returnValue: _i5.Stream<_i2.QueryResult<TParsed>>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.QueryResult<TParsed>>.empty(),
      ) as _i5.Stream<_i2.QueryResult<TParsed>>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> fetchMore<TParsed>(
    _i2.FetchMoreOptions? fetchMoreOptions, {
    required _i2.QueryOptions<TParsed>? originalOptions,
    required _i2.QueryResult<TParsed>? previousResult,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMore,
          [fetchMoreOptions],
          {
            #originalOptions: originalOptions,
            #previousResult: previousResult,
          },
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #fetchMore,
            [fetchMoreOptions],
            {
              #originalOptions: originalOptions,
              #previousResult: previousResult,
            },
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #fetchMore,
            [fetchMoreOptions],
            {
              #originalOptions: originalOptions,
              #previousResult: previousResult,
            },
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  Map<String, dynamic>? readQuery(
    _i2.Request? request, {
    bool? optimistic = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readQuery,
          [request],
          {#optimistic: optimistic},
        ),
        returnValueForMissingStub: null,
      ) as Map<String, dynamic>?);
  @override
  Map<String, dynamic>? readFragment(
    _i3.FragmentRequest? fragmentRequest, {
    bool? optimistic = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readFragment,
          [fragmentRequest],
          {#optimistic: optimistic},
        ),
        returnValueForMissingStub: null,
      ) as Map<String, dynamic>?);
  @override
  void writeQuery(
    _i2.Request? request, {
    required Map<String, dynamic>? data,
    bool? broadcast = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeQuery,
          [request],
          {
            #data: data,
            #broadcast: broadcast,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void writeFragment(
    _i3.FragmentRequest? fragmentRequest, {
    bool? broadcast = true,
    required Map<String, dynamic>? data,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeFragment,
          [fragmentRequest],
          {
            #broadcast: broadcast,
            #data: data,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<List<_i2.QueryResult<Object?>?>>? resetStore(
          {bool? refetchQueries = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetStore,
          [],
          {#refetchQueries: refetchQueries},
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<List<_i2.QueryResult<Object?>?>>?);
}

/// A class which mocks [QueryManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryManager extends _i1.Mock implements _i2.QueryManager {
  @override
  _i2.Link get link => (super.noSuchMethod(
        Invocation.getter(#link),
        returnValue: _FakeLink_1(
          this,
          Invocation.getter(#link),
        ),
        returnValueForMissingStub: _FakeLink_1(
          this,
          Invocation.getter(#link),
        ),
      ) as _i2.Link);
  @override
  _i3.GraphQLCache get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: _FakeGraphQLCache_2(
          this,
          Invocation.getter(#cache),
        ),
        returnValueForMissingStub: _FakeGraphQLCache_2(
          this,
          Invocation.getter(#cache),
        ),
      ) as _i3.GraphQLCache);
  @override
  bool get alwaysRebroadcast => (super.noSuchMethod(
        Invocation.getter(#alwaysRebroadcast),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set scheduler(_i6.QueryScheduler? _scheduler) => super.noSuchMethod(
        Invocation.setter(
          #scheduler,
          _scheduler,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get idCounter => (super.noSuchMethod(
        Invocation.getter(#idCounter),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  set idCounter(int? _idCounter) => super.noSuchMethod(
        Invocation.setter(
          #idCounter,
          _idCounter,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, _i2.ObservableQuery<Object?>> get queries => (super.noSuchMethod(
        Invocation.getter(#queries),
        returnValue: <String, _i2.ObservableQuery<Object?>>{},
        returnValueForMissingStub: <String, _i2.ObservableQuery<Object?>>{},
      ) as Map<String, _i2.ObservableQuery<Object?>>);
  @override
  set queries(Map<String, _i2.ObservableQuery<Object?>>? _queries) =>
      super.noSuchMethod(
        Invocation.setter(
          #queries,
          _queries,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get rebroadcastLocked => (super.noSuchMethod(
        Invocation.getter(#rebroadcastLocked),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set rebroadcastLocked(bool? _rebroadcastLocked) => super.noSuchMethod(
        Invocation.setter(
          #rebroadcastLocked,
          _rebroadcastLocked,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.ObservableQuery<TParsed> watchQuery<TParsed>(
          _i2.WatchQueryOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchQuery,
          [options],
        ),
        returnValue: _FakeObservableQuery_5<TParsed>(
          this,
          Invocation.method(
            #watchQuery,
            [options],
          ),
        ),
        returnValueForMissingStub: _FakeObservableQuery_5<TParsed>(
          this,
          Invocation.method(
            #watchQuery,
            [options],
          ),
        ),
      ) as _i2.ObservableQuery<TParsed>);
  @override
  _i5.Stream<_i2.QueryResult<TParsed>> subscribe<TParsed>(
          _i2.SubscriptionOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribe,
          [options],
        ),
        returnValue: _i5.Stream<_i2.QueryResult<TParsed>>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.QueryResult<TParsed>>.empty(),
      ) as _i5.Stream<_i2.QueryResult<TParsed>>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> query<TParsed>(
          _i2.QueryOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [options],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #query,
            [options],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #query,
            [options],
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> mutate<TParsed>(
          _i2.MutationOptions<TParsed>? options) =>
      (super.noSuchMethod(
        Invocation.method(
          #mutate,
          [options],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #mutate,
            [options],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #mutate,
            [options],
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> fetchQuery<TParsed>(
    String? queryId,
    _i7.BaseOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchQuery,
          [
            queryId,
            options,
          ],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #fetchQuery,
            [
              queryId,
              options,
            ],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #fetchQuery,
            [
              queryId,
              options,
            ],
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  _i2.MultiSourceResult<TParsed> fetchQueryAsMultiSourceResult<TParsed>(
    String? queryId,
    _i7.BaseOptions<TParsed>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchQueryAsMultiSourceResult,
          [
            queryId,
            options,
          ],
        ),
        returnValue: _FakeMultiSourceResult_7<TParsed>(
          this,
          Invocation.method(
            #fetchQueryAsMultiSourceResult,
            [
              queryId,
              options,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeMultiSourceResult_7<TParsed>(
          this,
          Invocation.method(
            #fetchQueryAsMultiSourceResult,
            [
              queryId,
              options,
            ],
          ),
        ),
      ) as _i2.MultiSourceResult<TParsed>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>?> refetchQuery<TParsed>(
          String? queryId) =>
      (super.noSuchMethod(
        Invocation.method(
          #refetchQuery,
          [queryId],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i2.QueryResult<TParsed>?>.value(),
      ) as _i5.Future<_i2.QueryResult<TParsed>?>);
  @override
  _i5.Future<List<_i2.QueryResult<Object?>?>> refetchSafeQueries() =>
      (super.noSuchMethod(
        Invocation.method(
          #refetchSafeQueries,
          [],
        ),
        returnValue: _i5.Future<List<_i2.QueryResult<Object?>?>>.value(
            <_i2.QueryResult<Object?>?>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i2.QueryResult<Object?>?>>.value(
                <_i2.QueryResult<Object?>?>[]),
      ) as _i5.Future<List<_i2.QueryResult<Object?>?>>);
  @override
  void addQueryResult<TParsed>(
    _i2.Request? request,
    String? queryId,
    _i2.QueryResult<TParsed>? queryResult,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addQueryResult,
          [
            request,
            queryId,
            queryResult,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool maybeRebroadcastQueries({
    _i2.ObservableQuery<Object?>? exclude,
    bool? force = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybeRebroadcastQueries,
          [],
          {
            #exclude: exclude,
            #force: force,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void setQuery(_i2.ObservableQuery<Object?>? observableQuery) =>
      super.noSuchMethod(
        Invocation.method(
          #setQuery,
          [observableQuery],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void closeQuery(
    _i2.ObservableQuery<Object?>? observableQuery, {
    bool? fromQuery = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #closeQuery,
          [observableQuery],
          {#fromQuery: fromQuery},
        ),
        returnValueForMissingStub: null,
      );
  @override
  int generateQueryId() => (super.noSuchMethod(
        Invocation.method(
          #generateQueryId,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [DefaultPolicies].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDefaultPolicies extends _i1.Mock implements _i2.DefaultPolicies {
  @override
  _i2.Policies get watchQuery => (super.noSuchMethod(
        Invocation.getter(#watchQuery),
        returnValue: _FakePolicies_8(
          this,
          Invocation.getter(#watchQuery),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.getter(#watchQuery),
        ),
      ) as _i2.Policies);
  @override
  _i2.Policies get watchMutation => (super.noSuchMethod(
        Invocation.getter(#watchMutation),
        returnValue: _FakePolicies_8(
          this,
          Invocation.getter(#watchMutation),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.getter(#watchMutation),
        ),
      ) as _i2.Policies);
  @override
  _i2.Policies get query => (super.noSuchMethod(
        Invocation.getter(#query),
        returnValue: _FakePolicies_8(
          this,
          Invocation.getter(#query),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.getter(#query),
        ),
      ) as _i2.Policies);
  @override
  _i2.Policies get mutate => (super.noSuchMethod(
        Invocation.getter(#mutate),
        returnValue: _FakePolicies_8(
          this,
          Invocation.getter(#mutate),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.getter(#mutate),
        ),
      ) as _i2.Policies);
  @override
  _i2.Policies get subscribe => (super.noSuchMethod(
        Invocation.getter(#subscribe),
        returnValue: _FakePolicies_8(
          this,
          Invocation.getter(#subscribe),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.getter(#subscribe),
        ),
      ) as _i2.Policies);
  @override
  _i2.DefaultPolicies copyWith({
    _i2.Policies? watchQuery,
    _i2.Policies? query,
    _i2.Policies? watchMutation,
    _i2.Policies? mutate,
    _i2.Policies? subscribe,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #watchQuery: watchQuery,
            #query: query,
            #watchMutation: watchMutation,
            #mutate: mutate,
            #subscribe: subscribe,
          },
        ),
        returnValue: _FakeDefaultPolicies_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #watchQuery: watchQuery,
              #query: query,
              #watchMutation: watchMutation,
              #mutate: mutate,
              #subscribe: subscribe,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDefaultPolicies_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #watchQuery: watchQuery,
              #query: query,
              #watchMutation: watchMutation,
              #mutate: mutate,
              #subscribe: subscribe,
            },
          ),
        ),
      ) as _i2.DefaultPolicies);
}

/// A class which mocks [Policies].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockPolicies extends _i1.Mock implements _i2.Policies {
  @override
  bool get mergeOptimisticData => (super.noSuchMethod(
        Invocation.getter(#mergeOptimisticData),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get allowsRebroadcasting => (super.noSuchMethod(
        Invocation.getter(#allowsRebroadcasting),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i2.Policies withOverrides([_i2.Policies? overrides]) => (super.noSuchMethod(
        Invocation.method(
          #withOverrides,
          [overrides],
        ),
        returnValue: _FakePolicies_8(
          this,
          Invocation.method(
            #withOverrides,
            [overrides],
          ),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.method(
            #withOverrides,
            [overrides],
          ),
        ),
      ) as _i2.Policies);
  @override
  _i2.Policies copyWith({
    _i2.FetchPolicy? fetch,
    _i2.ErrorPolicy? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #fetch: fetch,
            #error: error,
          },
        ),
        returnValue: _FakePolicies_8(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #fetch: fetch,
              #error: error,
            },
          ),
        ),
        returnValueForMissingStub: _FakePolicies_8(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #fetch: fetch,
              #error: error,
            },
          ),
        ),
      ) as _i2.Policies);
}

/// A class which mocks [ObservableQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockObservableQuery<TParsed> extends _i1.Mock
    implements _i2.ObservableQuery<TParsed> {
  @override
  String get queryId => (super.noSuchMethod(
        Invocation.getter(#queryId),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i2.QueryManager get queryManager => (super.noSuchMethod(
        Invocation.getter(#queryManager),
        returnValue: _FakeQueryManager_3(
          this,
          Invocation.getter(#queryManager),
        ),
        returnValueForMissingStub: _FakeQueryManager_3(
          this,
          Invocation.getter(#queryManager),
        ),
      ) as _i2.QueryManager);
  @override
  set latestResult(_i2.QueryResult<TParsed>? _latestResult) =>
      super.noSuchMethod(
        Invocation.setter(
          #latestResult,
          _latestResult,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.QueryLifecycle get lifecycle => (super.noSuchMethod(
        Invocation.getter(#lifecycle),
        returnValue: _i2.QueryLifecycle.unexecuted,
        returnValueForMissingStub: _i2.QueryLifecycle.unexecuted,
      ) as _i2.QueryLifecycle);
  @override
  set lifecycle(_i2.QueryLifecycle? _lifecycle) => super.noSuchMethod(
        Invocation.setter(
          #lifecycle,
          _lifecycle,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.WatchQueryOptions<TParsed> get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeWatchQueryOptions_9<TParsed>(
          this,
          Invocation.getter(#options),
        ),
        returnValueForMissingStub: _FakeWatchQueryOptions_9<TParsed>(
          this,
          Invocation.getter(#options),
        ),
      ) as _i2.WatchQueryOptions<TParsed>);
  @override
  set options(_i2.WatchQueryOptions<TParsed>? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.StreamController<_i2.QueryResult<TParsed>> get controller =>
      (super.noSuchMethod(
        Invocation.getter(#controller),
        returnValue: _FakeStreamController_10<_i2.QueryResult<TParsed>>(
          this,
          Invocation.getter(#controller),
        ),
        returnValueForMissingStub:
            _FakeStreamController_10<_i2.QueryResult<TParsed>>(
          this,
          Invocation.getter(#controller),
        ),
      ) as _i5.StreamController<_i2.QueryResult<TParsed>>);
  @override
  set controller(_i5.StreamController<_i2.QueryResult<TParsed>>? _controller) =>
      super.noSuchMethod(
        Invocation.setter(
          #controller,
          _controller,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Stream<_i2.QueryResult<TParsed>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i2.QueryResult<TParsed>>.empty(),
        returnValueForMissingStub: _i5.Stream<_i2.QueryResult<TParsed>>.empty(),
      ) as _i5.Stream<_i2.QueryResult<TParsed>>);
  @override
  bool get isCurrentlyPolling => (super.noSuchMethod(
        Invocation.getter(#isCurrentlyPolling),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isRefetchSafe => (super.noSuchMethod(
        Invocation.getter(#isRefetchSafe),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  bool get isRebroadcastSafe => (super.noSuchMethod(
        Invocation.getter(#isRebroadcastSafe),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  set variables(Map<String, dynamic>? variables) => super.noSuchMethod(
        Invocation.setter(
          #variables,
          variables,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set optimisticResult(Object? optimisticResult) => super.noSuchMethod(
        Invocation.setter(
          #optimisticResult,
          optimisticResult,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get sideEffectsArePending => (super.noSuchMethod(
        Invocation.getter(#sideEffectsArePending),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i5.Future<_i2.QueryResult<TParsed>?> refetch() => (super.noSuchMethod(
        Invocation.method(
          #refetch,
          [],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i2.QueryResult<TParsed>?>.value(),
      ) as _i5.Future<_i2.QueryResult<TParsed>?>);
  @override
  void onListen() => super.noSuchMethod(
        Invocation.method(
          #onListen,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.MultiSourceResult<TParsed> fetchResults({_i2.FetchPolicy? fetchPolicy}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchResults,
          [],
          {#fetchPolicy: fetchPolicy},
        ),
        returnValue: _FakeMultiSourceResult_7<TParsed>(
          this,
          Invocation.method(
            #fetchResults,
            [],
            {#fetchPolicy: fetchPolicy},
          ),
        ),
        returnValueForMissingStub: _FakeMultiSourceResult_7<TParsed>(
          this,
          Invocation.method(
            #fetchResults,
            [],
            {#fetchPolicy: fetchPolicy},
          ),
        ),
      ) as _i2.MultiSourceResult<TParsed>);
  @override
  _i5.Future<_i2.QueryResult<TParsed>> fetchMore(
          _i2.FetchMoreOptions? fetchMoreOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMore,
          [fetchMoreOptions],
        ),
        returnValue: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #fetchMore,
            [fetchMoreOptions],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.QueryResult<TParsed>>.value(
            _FakeQueryResult_6<TParsed>(
          this,
          Invocation.method(
            #fetchMore,
            [fetchMoreOptions],
          ),
        )),
      ) as _i5.Future<_i2.QueryResult<TParsed>>);
  @override
  void addResult(
    _i2.QueryResult<TParsed>? result, {
    bool? fromRebroadcast = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addResult,
          [result],
          {#fromRebroadcast: fromRebroadcast},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void Function() onData(
    Iterable<_i2.OnData<TParsed>>? callbacks, {
    bool? removeAfterInvocation = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onData,
          [callbacks],
          {#removeAfterInvocation: removeAfterInvocation},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as void Function());
  @override
  void startPolling(Duration? pollInterval) => super.noSuchMethod(
        Invocation.method(
          #startPolling,
          [pollInterval],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stopPolling() => super.noSuchMethod(
        Invocation.method(
          #stopPolling,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.FutureOr<_i2.QueryLifecycle> close({
    bool? force = false,
    bool? fromManager = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {
            #force: force,
            #fromManager: fromManager,
          },
        ),
        returnValue:
            _i5.Future<_i2.QueryLifecycle>.value(_i2.QueryLifecycle.unexecuted),
        returnValueForMissingStub:
            _i5.Future<_i2.QueryLifecycle>.value(_i2.QueryLifecycle.unexecuted),
      ) as _i5.FutureOr<_i2.QueryLifecycle>);
}
